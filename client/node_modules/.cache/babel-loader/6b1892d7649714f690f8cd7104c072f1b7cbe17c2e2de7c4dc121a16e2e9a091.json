{"ast":null,"code":"var _jsxFileName = \"/Users/guusvanrees/Documents/Programming/projects/SET/client/src/components/GroupChat.js\",\n  _s = $RefreshSig$();\n// components/GroupChat.js\nimport React, { useEffect, useState } from 'react';\nimport { Navigate, useNavigate, useParams } from 'react-router-dom';\nimport axiosInstance from './Auth/AxiosInstance';\nimport './styles/GroupChat.css';\nimport Reports from '../components/Brokers/Reports';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL; // Your API base URL\n\nconst GroupChat = ({\n  groupChatId\n}) => {\n  _s();\n  const params = useParams();\n  const groupId = groupChatId || params.groupId;\n  const navigate = useNavigate();\n  const [participants, setParticipants] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [messageContent, setMessageContent] = useState('');\n  const userId = localStorage.getItem('userId'); // Make sure this key matches where you store the user ID\n  const role = localStorage.getItem('role'); // Make sure this key matches where you store the user ID\n\n  // Fetch messages when the component mounts or when the groupId changes\n\n  const fetchGroupData = async () => {\n    try {\n      const response = await axiosInstance.get(`${API_URL}/api/groupchat/group/${groupId}`);\n      setParticipants(response.data.participants);\n      setMessages(response.data.messages); // Set messages to state\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  useEffect(() => {\n    fetchGroupData(); // Initial fetch\n  }, []); // Run effect when groupId changes\n\n  // Send a message to the group chat\n  const sendMessage = async () => {\n    if (!messageContent.trim()) return; // Do not send if the message is empty\n\n    try {\n      await axiosInstance.post(`${API_URL}/api/groupchat/${groupId}/message`, {\n        message: messageContent.trim() // Message content\n      });\n      setMessageContent(''); // Clear input field\n      fetchGroupData(); // Refresh messages after sending\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const handleBack = async () => {\n    navigate('/inbox');\n  };\n  const getSenderDetails = senderId => {\n    const sender = participants.find(participant => participant.userId === senderId);\n    return sender; // Fallback in case sender is not found\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group-chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"participants\",\n          children: participants.map(participant => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"participant\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: participant.profile.profilePicture ? `${API_URL}${participant.profile.profilePicture}` : `${API_URL}/uploads/broker.png`,\n              alt: participant.userDetails.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: participant.userDetails.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 13\n            }, this)]\n          }, participant.userId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-list\",\n          children: messages.map(msg => {\n            const senderDetails = getSenderDetails(msg.sender);\n            const senderName = msg.sender === userId ? 'You' : senderDetails.userDetails.name; // Check sender ID\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message`,\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [senderName, \": \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 13\n              }, this), msg.message, /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"timestamp\",\n                children: new Date(msg.createdAt).toLocaleTimeString()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 13\n              }, this)]\n            }, msg._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 11\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: messageContent,\n          onChange: e => setMessageContent(e.target.value),\n          placeholder: \"Type your message...\",\n          rows: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }, this), role === 'broker' && /*#__PURE__*/_jsxDEV(Reports, {\n        roomNumber: roomNumber\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 3\n  }, this);\n};\n_s(GroupChat, \"VJMlc3guVMoia4jnIPa0nHfXPYs=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = GroupChat;\nexport default GroupChat;\nvar _c;\n$RefreshReg$(_c, \"GroupChat\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","useNavigate","useParams","axiosInstance","Reports","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","GroupChat","groupChatId","_s","params","groupId","navigate","participants","setParticipants","messages","setMessages","messageContent","setMessageContent","userId","localStorage","getItem","role","fetchGroupData","response","get","data","error","console","sendMessage","trim","post","message","handleBack","getSenderDetails","senderId","sender","find","participant","children","className","map","src","profile","profilePicture","alt","userDetails","name","fileName","_jsxFileName","lineNumber","columnNumber","msg","senderDetails","senderName","Date","createdAt","toLocaleTimeString","_id","value","onChange","e","target","placeholder","rows","onClick","roomNumber","_c","$RefreshReg$"],"sources":["/Users/guusvanrees/Documents/Programming/projects/SET/client/src/components/GroupChat.js"],"sourcesContent":["// components/GroupChat.js\nimport React, { useEffect, useState } from 'react';\nimport { Navigate, useNavigate, useParams } from 'react-router-dom';\nimport axiosInstance from './Auth/AxiosInstance';\nimport './styles/GroupChat.css'\nimport Reports from '../components/Brokers/Reports';\n\nconst API_URL = process.env.REACT_APP_API_URL; // Your API base URL\n\nconst GroupChat = ({groupChatId}) => {\n\n  const params = useParams();\n  const groupId = groupChatId || params.groupId;\n\n  const navigate = useNavigate();\n\n  const [participants, setParticipants] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [messageContent, setMessageContent] = useState('');\n\n  const userId = localStorage.getItem('userId'); // Make sure this key matches where you store the user ID\n  const role = localStorage.getItem('role'); // Make sure this key matches where you store the user ID\n\n  // Fetch messages when the component mounts or when the groupId changes\n\n  const fetchGroupData = async () => {\n    try {\n      const response = await axiosInstance.get(`${API_URL}/api/groupchat/group/${groupId}`);\n      setParticipants(response.data.participants);\n      setMessages(response.data.messages); // Set messages to state\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchGroupData(); // Initial fetch\n  }, []); // Run effect when groupId changes\n\n  // Send a message to the group chat\n  const sendMessage = async () => {\n    if (!messageContent.trim()) return; // Do not send if the message is empty\n\n    try {\n      await axiosInstance.post(`${API_URL}/api/groupchat/${groupId}/message`, {\n        message: messageContent.trim(), // Message content\n      });\n      setMessageContent(''); // Clear input field\n      fetchGroupData(); // Refresh messages after sending\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const handleBack = async () => {\n    navigate('/inbox');\n  }\n\n  const getSenderDetails = (senderId) => {\n    const sender = participants.find(participant => participant.userId === senderId);\n    return sender; // Fallback in case sender is not found\n  };\n\n  return (\n  <div>\n  \n  <div className=\"group-chat\">\n    \n    <div className=\"chat-container\">\n      <div className=\"participants\">\n        {participants.map((participant) => (\n          <div key={participant.userId} className=\"participant\">\n            <img src={participant.profile.profilePicture ? `${API_URL}${participant.profile.profilePicture}` : `${API_URL}/uploads/broker.png`} alt={participant.userDetails.name} />\n            <span>{participant.userDetails.name}</span>\n          </div>\n        ))}\n      </div>\n      <div className=\"message-list\">\n        {messages.map((msg) => {\n          const senderDetails = getSenderDetails(msg.sender);\n          const senderName = msg.sender === userId ? 'You' : senderDetails.userDetails.name; // Check sender ID\n          return (\n          <div key={msg._id} className={`message`}>\n            <strong>{senderName}: </strong>{msg.message}\n            <span className=\"timestamp\">{new Date(msg.createdAt).toLocaleTimeString()}</span>\n          </div>\n         );\n        })}\n      </div>\n    </div>\n    <div className=\"message-input\">\n      <textarea\n        value={messageContent}\n        onChange={(e) => setMessageContent(e.target.value)}\n        placeholder=\"Type your message...\"\n        rows=\"3\"\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n\n    {role === 'broker' && (<Reports roomNumber={roomNumber}/>)}\n\n  </div>\n\n\n\n  </div>\n  );\n};\n\nexport default GroupChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
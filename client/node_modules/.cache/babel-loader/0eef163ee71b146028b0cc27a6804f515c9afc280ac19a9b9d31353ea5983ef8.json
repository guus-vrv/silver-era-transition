{"ast":null,"code":"// components/GroupChat.js\nimport React,{useEffect,useState}from'react';import axiosInstance from'./Auth/AxiosInstance';import{useNavigate}from'react-router-dom';import GroupChat from'./GroupChat';import'./styles/Inbox.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_URL=process.env.REACT_APP_API_URL;// Your API base URL\nconst Inbox=()=>{const[groups,setGroups]=useState([]);const navigate=useNavigate();const[messageContent,setMessageContent]=useState('');const userId=localStorage.getItem('userId');// Make sure this key matches where you store the user ID\n// Fetch messages when the component mounts or when the groupId changes\nconst fetchGroups=async()=>{try{const response=await axiosInstance.get(`${API_URL}/api/groupchat/groups`);setGroups(response.data);// Set messages to state\n}catch(error){console.error('Error fetching messages:',error);}};useEffect(()=>{fetchGroups();// Initial fetch\n},[]);// Run effect when groupId changes\nconst handleViewGroup=groupId=>{navigate(`/group-chat/${groupId}`);};// Send a message to the group chat\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"group-chats-grid\",children:groups.map(chat=>/*#__PURE__*/_jsxs(\"div\",{className:\"group-chat-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"participants-pictures\",children:chat.participants.map(participant=>{return/*#__PURE__*/_jsx(\"img\",{src:participant.profile.profilePicture?`${API_URL}${participant.profile.profilePicture}`:`${API_URL}/uploads/broker.png`,alt:`${participant.name}'s profile`,className:\"participant-picture\"},participant.userId);})}),/*#__PURE__*/_jsx(\"div\",{className:\"group-chat-info\",children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Participants:\"}),\" \",chat.participants.map(p=>{return p.userId===userId?'You':p.userDetails.name;}).join(', ')// Join the array of names into a string\n]})}),/*#__PURE__*/_jsx(\"button\",{className:\"view-group-button\",onClick:()=>handleViewGroup(chat.chatId),children:\"View Group\"})]},chat.chatId))});};export default Inbox;","map":{"version":3,"names":["React","useEffect","useState","axiosInstance","useNavigate","GroupChat","jsx","_jsx","jsxs","_jsxs","API_URL","process","env","REACT_APP_API_URL","Inbox","groups","setGroups","navigate","messageContent","setMessageContent","userId","localStorage","getItem","fetchGroups","response","get","data","error","console","handleViewGroup","groupId","className","children","map","chat","participants","participant","src","profile","profilePicture","alt","name","p","userDetails","join","onClick","chatId"],"sources":["/Users/guusvanrees/Documents/Programming/projects/SET/client/src/components/Inbox.js"],"sourcesContent":["// components/GroupChat.js\nimport React, { useEffect, useState } from 'react';\nimport axiosInstance from './Auth/AxiosInstance';\nimport { useNavigate } from 'react-router-dom';\nimport GroupChat from './GroupChat';\nimport './styles/Inbox.css';\n\nconst API_URL = process.env.REACT_APP_API_URL; // Your API base URL\n\nconst Inbox = () => {\n  const [groups, setGroups] = useState([]);\n  const navigate = useNavigate();\n  const [messageContent, setMessageContent] = useState('');\n\n  const userId = localStorage.getItem('userId'); // Make sure this key matches where you store the user ID\n\n  // Fetch messages when the component mounts or when the groupId changes\n\n  const fetchGroups = async () => {\n    try {\n      const response = await axiosInstance.get(`${API_URL}/api/groupchat/groups`);\n      setGroups(response.data); // Set messages to state\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchGroups(); // Initial fetch\n  }, []); // Run effect when groupId changes\n\n  const handleViewGroup = (groupId) => {\n    navigate(`/group-chat/${groupId}`);\n  };\n\n  // Send a message to the group chat\n\n  return (\n    <div className=\"group-chats-grid\">\n    {groups.map((chat) => (\n      <div key={chat.chatId} className=\"group-chat-card\">\n        <div className=\"participants-pictures\">\n          {chat.participants.map((participant) => {\n            return (\n            <img \n              key={participant.userId} \n              src={participant.profile.profilePicture ? `${API_URL}${participant.profile.profilePicture}` : `${API_URL}/uploads/broker.png`}\n              alt={`${participant.name}'s profile`} \n              className=\"participant-picture\"\n            />\n          );\n        })}\n        </div>\n        <div className=\"group-chat-info\">\n          <p><strong>Participants:</strong> {\n            \n          chat.participants.map(p => {\n            return p.userId === userId ? 'You' : p.userDetails.name;\n          }).join(', ') // Join the array of names into a string\n          }</p>\n        </div>\n        <button \n          className=\"view-group-button\" \n          onClick={() => handleViewGroup(chat.chatId)}\n        >\n          View Group\n        </button>\n      </div>\n    ))}\n  </div>\n  );\n};\n\nexport default Inbox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
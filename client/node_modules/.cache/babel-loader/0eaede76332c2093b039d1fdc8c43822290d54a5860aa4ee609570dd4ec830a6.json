{"ast":null,"code":"// components/GroupChat.js\nimport React,{useEffect,useState}from'react';import{Navigate,useNavigate,useParams}from'react-router-dom';import axiosInstance from'./Auth/AxiosInstance';import'./styles/GroupChat.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_URL=process.env.REACT_APP_API_URL;// Your API base URL\nconst GroupChat=_ref=>{let{groupChatId}=_ref;const params=useParams();const groupId=groupChatId||params.groupId;const navigate=useNavigate();const[participants,setParticipants]=useState([]);const[messages,setMessages]=useState([]);const[messageContent,setMessageContent]=useState('');const userId=localStorage.getItem('userId');// Make sure this key matches where you store the user ID\n// Fetch messages when the component mounts or when the groupId changes\nconst fetchGroupData=async()=>{try{const response=await axiosInstance.get(`${API_URL}/api/groupchat/group/${groupId}`);setParticipants(response.data.participants);setMessages(response.data.messages);// Set messages to state\n}catch(error){console.error('Error fetching messages:',error);}};useEffect(()=>{fetchGroupData();// Initial fetch\n},[]);// Run effect when groupId changes\n// Send a message to the group chat\nconst sendMessage=async()=>{if(!messageContent.trim())return;// Do not send if the message is empty\ntry{await axiosInstance.post(`${API_URL}/api/groupchat/${groupId}/message`,{message:messageContent.trim()// Message content\n});setMessageContent('');// Clear input field\nfetchGroupData();// Refresh messages after sending\n}catch(error){console.error('Error sending message:',error);}};const handleBack=async()=>{navigate('/inbox');};const getSenderDetails=senderId=>{const sender=participants.find(participant=>participant.userId===senderId);return sender;// Fallback in case sender is not found\n};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"group-chat\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"participants\",children:participants.map(participant=>/*#__PURE__*/_jsxs(\"div\",{className:\"participant\",children:[/*#__PURE__*/_jsx(\"img\",{src:participant.profile.profilePicture?`${API_URL}${participant.profile.profilePicture}`:`${API_URL}/uploads/broker.png`,alt:participant.userDetails.name}),/*#__PURE__*/_jsx(\"span\",{children:participant.userDetails.name})]},participant.userId))}),/*#__PURE__*/_jsx(\"div\",{className:\"message-list\",children:messages.map(msg=>{const senderDetails=getSenderDetails(msg.sender);const senderName=msg.sender===userId?'You':senderDetails.userDetails.name;// Check sender ID\nreturn/*#__PURE__*/_jsxs(\"div\",{className:`message`,children:[/*#__PURE__*/_jsxs(\"strong\",{children:[senderName,\": \"]}),msg.message,/*#__PURE__*/_jsx(\"span\",{className:\"timestamp\",children:new Date(msg.createdAt).toLocaleTimeString()})]},msg._id);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"message-input\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:messageContent,onChange:e=>setMessageContent(e.target.value),placeholder:\"Type your message...\",rows:\"3\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,children:\"Send\"})]})]})});};export default GroupChat;","map":{"version":3,"names":["React","useEffect","useState","Navigate","useNavigate","useParams","axiosInstance","jsx","_jsx","jsxs","_jsxs","API_URL","process","env","REACT_APP_API_URL","GroupChat","_ref","groupChatId","params","groupId","navigate","participants","setParticipants","messages","setMessages","messageContent","setMessageContent","userId","localStorage","getItem","fetchGroupData","response","get","data","error","console","sendMessage","trim","post","message","handleBack","getSenderDetails","senderId","sender","find","participant","children","className","map","src","profile","profilePicture","alt","userDetails","name","msg","senderDetails","senderName","Date","createdAt","toLocaleTimeString","_id","value","onChange","e","target","placeholder","rows","onClick"],"sources":["/Users/guusvanrees/Documents/Programming/projects/SET/client/src/components/GroupChat.js"],"sourcesContent":["// components/GroupChat.js\nimport React, { useEffect, useState } from 'react';\nimport { Navigate, useNavigate, useParams } from 'react-router-dom';\nimport axiosInstance from './Auth/AxiosInstance';\nimport './styles/GroupChat.css'\n\nconst API_URL = process.env.REACT_APP_API_URL; // Your API base URL\n\nconst GroupChat = ({groupChatId}) => {\n\n  const params = useParams();\n  const groupId = groupChatId || params.groupId;\n\n  const navigate = useNavigate();\n\n  const [participants, setParticipants] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [messageContent, setMessageContent] = useState('');\n\n  const userId = localStorage.getItem('userId'); // Make sure this key matches where you store the user ID\n\n  // Fetch messages when the component mounts or when the groupId changes\n\n  const fetchGroupData = async () => {\n    try {\n      const response = await axiosInstance.get(`${API_URL}/api/groupchat/group/${groupId}`);\n      setParticipants(response.data.participants);\n      setMessages(response.data.messages); // Set messages to state\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchGroupData(); // Initial fetch\n  }, []); // Run effect when groupId changes\n\n  // Send a message to the group chat\n  const sendMessage = async () => {\n    if (!messageContent.trim()) return; // Do not send if the message is empty\n\n    try {\n      await axiosInstance.post(`${API_URL}/api/groupchat/${groupId}/message`, {\n        message: messageContent.trim(), // Message content\n      });\n      setMessageContent(''); // Clear input field\n      fetchGroupData(); // Refresh messages after sending\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const handleBack = async () => {\n    navigate('/inbox');\n  }\n\n  const getSenderDetails = (senderId) => {\n    const sender = participants.find(participant => participant.userId === senderId);\n    return sender; // Fallback in case sender is not found\n  };\n\n  return (\n  <div>\n  \n  <div className=\"group-chat\">\n    \n    <div className=\"chat-container\">\n      <div className=\"participants\">\n        {participants.map((participant) => (\n          <div key={participant.userId} className=\"participant\">\n            <img src={participant.profile.profilePicture ? `${API_URL}${participant.profile.profilePicture}` : `${API_URL}/uploads/broker.png`} alt={participant.userDetails.name} />\n            <span>{participant.userDetails.name}</span>\n          </div>\n        ))}\n      </div>\n      <div className=\"message-list\">\n        {messages.map((msg) => {\n          const senderDetails = getSenderDetails(msg.sender);\n          const senderName = msg.sender === userId ? 'You' : senderDetails.userDetails.name; // Check sender ID\n          return (\n          <div key={msg._id} className={`message`}>\n            <strong>{senderName}: </strong>{msg.message}\n            <span className=\"timestamp\">{new Date(msg.createdAt).toLocaleTimeString()}</span>\n          </div>\n         );\n        })}\n      </div>\n    </div>\n    <div className=\"message-input\">\n      <textarea\n        value={messageContent}\n        onChange={(e) => setMessageContent(e.target.value)}\n        placeholder=\"Type your message...\"\n        rows=\"3\"\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  </div>\n  </div>\n  );\n};\n\nexport default GroupChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}